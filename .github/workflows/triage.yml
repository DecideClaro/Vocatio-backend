name: Triage
on:
  issues: { types: [opened, labeled] }
  pull_request_target: { types: [opened, labeled, synchronize] }

permissions:
  contents: read
  issues: write
  pull-requests: write
  projects: write # <- NECESARIO

jobs:
  label-assign:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v5
        with: { repo-token: "${{ secrets.GITHUB_TOKEN }}" }

  add-to-project:
    runs-on: ubuntu-latest
    env:
      PROJECT_NUMBER: "1" # <-- cambia si corresponde
      PROJECT_OWNER: "${{ github.repository_owner }}"
      PROJECT_SCOPE: "org" # valores vÃ¡lidos: "org" o "repo"
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const number = parseInt(process.env.PROJECT_NUMBER, 10);
            const scope  = process.env.PROJECT_SCOPE;
            const owner  = process.env.PROJECT_OWNER;

            const nodeId = context.payload.issue?.node_id
                        ?? context.payload.pull_request?.node_id;
            if (!nodeId) {
              core.info('No content node_id; skipping.');
              return;
            }

            let projectId;
            if (scope === 'org') {
              const res = await github.graphql(`
                query($org:String!, $num:Int!){
                  organization(login:$org){ projectV2(number:$num){ id } }
                }`, { org: owner, num: number });
              projectId = res.organization.projectV2.id;
            } else {
              const repo = context.repo.repo;
              const res = await github.graphql(`
                query($org:String!, $repo:String!, $num:Int!){
                  repository(owner:$org, name:$repo){ projectV2(number:$num){ id } }
                }`, { org: owner, repo, num: number });
              projectId = res.repository.projectV2.id;
            }

            await github.graphql(`
              mutation($projectId:ID!, $contentId:ID!){
                addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}){ item { id } }
              }`, { projectId, contentId: nodeId });
