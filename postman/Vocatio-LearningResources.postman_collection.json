{
	"info": {
		"_postman_id": "vocatio-learning-resources-001",
		"name": "Vocatio - Learning Resources API",
		"description": "Colección completa para probar los endpoints del Módulo 4: Recursos de Aprendizaje con tests automáticos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "1. Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Verificar código de respuesta",
									"pm.test(\"Status code es 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Test 2: Verificar que el body no está vacío",
									"pm.test(\"Response tiene body\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Test 3: Verificar estructura de la respuesta",
									"pm.test(\"Response tiene tokens y message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('tokens');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"// Test 4: Verificar que accessToken existe",
									"pm.test(\"AccessToken está presente\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tokens).to.have.property('accessToken');",
									"    pm.expect(jsonData.tokens.accessToken).to.be.a('string');",
									"    pm.expect(jsonData.tokens.accessToken.length).to.be.above(0);",
									"});",
									"",
									"// Test 5: Verificar que refreshToken existe",
									"pm.test(\"RefreshToken está presente\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tokens).to.have.property('refreshToken');",
									"});",
									"",
									"// Test 6: Guardar tokens automáticamente",
									"if (pm.response.code === 201) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"accessToken\", jsonData.tokens.accessToken);",
									"    pm.environment.set(\"refreshToken\", jsonData.tokens.refreshToken);",
									"    console.log(\"✅ Tokens guardados automáticamente\");",
									"    console.log(\"Access Token:\", jsonData.tokens.accessToken.substring(0, 50) + \"...\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"estudiante{{$timestamp}}@vocatio.com\",\n  \"password\": \"Password123\",\n  \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "register"]
						},
						"description": "Registra un nuevo usuario. El email usa {{$timestamp}} para evitar duplicados."
					},
					"response": []
				},
				{
					"name": "2. Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Verificar código de respuesta",
									"pm.test(\"Status code es 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test 2: Verificar tiempo de respuesta",
									"pm.test(\"Response time es menor a 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"// Test 3: Verificar estructura de la respuesta",
									"pm.test(\"Response tiene estructura correcta\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('tokens');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.tokens).to.have.property('tokenType');",
									"    pm.expect(jsonData.tokens).to.have.property('accessToken');",
									"    pm.expect(jsonData.tokens).to.have.property('refreshToken');",
									"});",
									"",
									"// Test 4: Verificar que tokenType es Bearer",
									"pm.test(\"TokenType es Bearer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tokens.tokenType).to.equal('Bearer');",
									"});",
									"",
									"// Test 5: Verificar formato del JWT",
									"pm.test(\"AccessToken tiene formato JWT válido\", function () {",
									"    var jsonData = pm.response.json();",
									"    var token = jsonData.tokens.accessToken;",
									"    var parts = token.split('.');",
									"    pm.expect(parts.length).to.equal(3); // JWT tiene 3 partes",
									"});",
									"",
									"// Test 6: Guardar tokens automáticamente",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"accessToken\", jsonData.tokens.accessToken);",
									"    pm.environment.set(\"refreshToken\", jsonData.tokens.refreshToken);",
									"    console.log(\"✅ Login exitoso - Token guardado\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"estudiante@vocatio.com\",\n  \"password\": \"Password123\",\n  \"rememberMe\": false\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "login"]
						},
						"description": "Inicia sesión y obtiene tokens JWT. Los tokens se guardan automáticamente en variables de entorno."
					},
					"response": []
				}
			]
		},
		{
			"name": "Learning Resources",
			"item": [
				{
					"name": "1. Get Resources by Career",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Verificar código de respuesta",
									"pm.test(\"Status code es 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test 2: Verificar que es JSON",
									"pm.test(\"Response es JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Test 3: Verificar estructura de paginación",
									"pm.test(\"Response tiene estructura de paginación\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('resources');",
									"    pm.expect(jsonData).to.have.property('currentPage');",
									"    pm.expect(jsonData).to.have.property('totalPages');",
									"    pm.expect(jsonData).to.have.property('totalElements');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"// Test 4: Verificar que resources es un array",
									"pm.test(\"Resources es un array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.resources).to.be.an('array');",
									"});",
									"",
									"// Test 5: Verificar estructura de cada recurso",
									"pm.test(\"Cada recurso tiene estructura correcta\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.resources.length > 0) {",
									"        var resource = jsonData.resources[0];",
									"        pm.expect(resource).to.have.property('id');",
									"        pm.expect(resource).to.have.property('titulo');",
									"        pm.expect(resource).to.have.property('tipoRecurso');",
									"        pm.expect(resource).to.have.property('urlRecurso');",
									"        pm.expect(resource).to.have.property('isSaved');",
									"    }",
									"});",
									"",
									"// Test 6: Verificar tipos de recurso válidos",
									"pm.test(\"TipoRecurso es válido\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.resources.length > 0) {",
									"        var validTypes = ['VIDEO', 'PDF', 'ENLACE', 'TESTIMONIO'];",
									"        jsonData.resources.forEach(function(resource) {",
									"            pm.expect(validTypes).to.include(resource.tipoRecurso);",
									"        });",
									"    }",
									"});",
									"",
									"// Test 7: Verificar que isSaved es booleano",
									"pm.test(\"isSaved es booleano\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.resources.length > 0) {",
									"        pm.expect(jsonData.resources[0].isSaved).to.be.a('boolean');",
									"    }",
									"});",
									"",
									"// Guardar ID del primer recurso para tests posteriores",
									"if (pm.response.code === 200) {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.resources.length > 0) {",
									"        pm.environment.set(\"testResourceId\", jsonData.resources[0].id);",
									"        console.log(\"✅ Guardado resourceId:\", jsonData.resources[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/learning-resources/by-career/:careerId?page=0&size=10",
							"host": ["{{baseUrl}}"],
							"path": ["api", "learning-resources", "by-career", ":careerId"],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "careerId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Get Resources by Area",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code es 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response tiene estructura correcta\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('resources');",
									"    pm.expect(jsonData).to.have.property('currentPage');",
									"    pm.expect(jsonData).to.have.property('totalPages');",
									"});",
									"",
									"pm.test(\"Message contiene 'área de interés'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message.toLowerCase()).to.include('área');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/learning-resources/by-area/:areaId?page=0&size=10",
							"host": ["{{baseUrl}}"],
							"path": ["api", "learning-resources", "by-area", ":areaId"],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "areaId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get Recommended Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code es 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Recomendaciones tienen estructura correcta\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('resources');",
									"    pm.expect(jsonData.resources).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Recursos de múltiples carreras\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.resources.length > 1) {",
									"        var careerIds = jsonData.resources.map(r => r.careerId);",
									"        var uniqueCareerIds = [...new Set(careerIds)];",
									"        // Debería haber recursos de al menos 1 carrera",
									"        pm.expect(uniqueCareerIds.length).to.be.at.least(1);",
									"    }",
									"});",
									"",
									"pm.test(\"Message menciona 'perfil' o 'sugeridos'\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData.message.toLowerCase();",
									"    var hasKeyword = message.includes('perfil') || message.includes('sugeridos') || message.includes('basado');",
									"    pm.expect(hasKeyword).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/learning-resources/recommended?careerIds=1,2,3&page=0&size=20",
							"host": ["{{baseUrl}}"],
							"path": ["api", "learning-resources", "recommended"],
							"query": [
								{
									"key": "careerIds",
									"value": "1,2,3"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Get Resources by Interests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code es 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response es válida\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('resources');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/learning-resources/by-interests?areaIds=1,2&page=0&size=20",
							"host": ["{{baseUrl}}"],
							"path": ["api", "learning-resources", "by-interests"],
							"query": [
								{
									"key": "areaIds",
									"value": "1,2"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Get Saved Resources (Favorites)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code es 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response tiene estructura de favoritos\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('resources');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Todos los recursos están marcados como guardados\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.resources.length > 0) {",
									"        jsonData.resources.forEach(function(resource) {",
									"            pm.expect(resource.isSaved).to.be.true;",
									"        });",
									"    }",
									"});",
									"",
									"pm.test(\"Message menciona 'guardados' o 'favoritos'\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData.message.toLowerCase();",
									"    var hasKeyword = message.includes('guardados') || message.includes('favoritos') || message.includes('tus');",
									"    pm.expect(hasKeyword).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/learning-resources/saved?page=0&size=20",
							"host": ["{{baseUrl}}"],
							"path": ["api", "learning-resources", "saved"],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Save Resource to Favorites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code es 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response tiene mensaje de éxito\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message.toLowerCase()).to.include('guardado');",
									"});",
									"",
									"pm.test(\"Response time es aceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"console.log(\"✅ Recurso guardado en favoritos\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Usar el resourceId guardado anteriormente, o usar 1 por defecto",
									"if (!pm.environment.get(\"testResourceId\")) {",
									"    pm.environment.set(\"testResourceId\", \"1\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"resourceId\": {{testResourceId}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/learning-resources/save",
							"host": ["{{baseUrl}}"],
							"path": ["api", "learning-resources", "save"]
						}
					},
					"response": []
				},
				{
					"name": "7. Unsave Resource from Favorites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code es 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response tiene mensaje de éxito\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message.toLowerCase()).to.include('eliminado');",
									"});",
									"",
									"console.log(\"✅ Recurso eliminado de favoritos\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/learning-resources/unsave/:resourceId",
							"host": ["{{baseUrl}}"],
							"path": ["api", "learning-resources", "unsave", ":resourceId"],
							"variable": [
								{
									"key": "resourceId",
									"value": "{{testResourceId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "8. Check if Resource is Saved",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code es 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response tiene campo isSaved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('isSaved');",
									"});",
									"",
									"pm.test(\"isSaved es booleano\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isSaved).to.be.a('boolean');",
									"});",
									"",
									"// Mostrar resultado en consola",
									"var jsonData = pm.response.json();",
									"console.log(\"Estado del recurso: \" + (jsonData.isSaved ? \"✅ Guardado\" : \"❌ No guardado\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/learning-resources/:resourceId/is-saved",
							"host": ["{{baseUrl}}"],
							"path": ["api", "learning-resources", ":resourceId", "is-saved"],
							"variable": [
								{
									"key": "resourceId",
									"value": "{{testResourceId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script que se ejecuta antes de cada request",
					"console.log(\"🚀 Ejecutando request: \" + pm.info.requestName);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script que se ejecuta después de cada request",
					"console.log(\"📊 Status: \" + pm.response.code + \" | Time: \" + pm.response.responseTime + \"ms\");"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}

