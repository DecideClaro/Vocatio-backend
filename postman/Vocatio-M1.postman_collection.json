{
    "info": {
        "_postman_id": "8aedf829-e8bb-4ef7-9cc2-671199905056",
        "name": "Vocatio API - Modulo 1",
        "description": "Coleccion de pruebas funcionales para el Modulo 1 (Gestion de cuenta y perfil). Incluye escenarios felices y de error para registro, login y perfil basico.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "M1-01 · Registro y acceso",
            "description": "Escenarios de registro y autenticacion (historia #2).",
            "item": [
                {
                    "name": "M1-01 · Registro - Exito",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "const uuid = pm.variables.replaceIn('{{$randomUUID}}');",
                                    "const email = `qa.m1.${uuid}@vocatio.test`.toLowerCase();",
                                    "pm.collectionVariables.set('registeredEmail', email);",
                                    "pm.collectionVariables.set('registeredUserId', '');",
                                    "pm.collectionVariables.set('accessToken', '');",
                                    "pm.collectionVariables.set('refreshToken', '');",
                                    "pm.collectionVariables.set('accessTokenExpiresAt', '');",
                                    "pm.collectionVariables.set('refreshTokenExpiresAt', '');"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 201 creado', function () { pm.response.to.have.status(201); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje de registro exitoso', function () { pm.expect(json.message).to.eql('Registro exitoso'); });",
                                    "pm.test('Resumen de usuario incluye email esperado', function () { pm.expect(json.user.email).to.eql(pm.collectionVariables.get('registeredEmail')); });",
                                    "pm.test('Se devuelve token de acceso', function () { pm.expect(json.tokens.accessToken).to.be.a('string').and.not.empty; });",
                                    "pm.test('Se devuelve token de refresco', function () { pm.expect(json.tokens.refreshToken).to.be.a('string').and.not.empty; });",
                                    "pm.collectionVariables.set('registeredUserId', json.user.id);",
                                    "pm.collectionVariables.set('accessToken', json.tokens.accessToken);",
                                    "pm.collectionVariables.set('refreshToken', json.tokens.refreshToken);",
                                    "pm.collectionVariables.set('accessTokenExpiresAt', json.tokens.accessTokenExpiresAt);",
                                    "pm.collectionVariables.set('refreshTokenExpiresAt', json.tokens.refreshTokenExpiresAt);"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"{{registeredEmail}}\",\n  \"password\": \"{{testPassword}}\",\n  \"rememberMe\": false\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "register"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-01 · Registro - Email duplicado",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 409 por email duplicado', function () { pm.response.to.have.status(409); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje de email duplicado', function () { pm.expect(json.message).to.eql('El email ya esta registrado'); });",
                                    "pm.test('Se sugieren opciones para el usuario', function () { pm.expect(json.suggestions).to.include.members(['Inicia sesion con tu cuenta', 'Recupera tu contrasena si la olvidaste']); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"{{registeredEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "register"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-01 · Registro - Politica de contrasena",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "const uuid = pm.variables.replaceIn('{{$randomUUID}}');",
                                    "pm.variables.set('invalidPasswordEmail', `qa.m1.policy.${uuid}@vocatio.test`.toLowerCase());"
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 400 por contrasena insegura', function () { pm.response.to.have.status(400); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje generico de validacion', function () { pm.expect(json.message).to.eql('Revise los datos enviados'); });",
                                    "pm.test('Se devuelven las tres reglas incumplidas', function () {\n                    const expected = [\n                      'La contrasena debe tener al menos 8 caracteres',\n                      'La contrasena debe incluir al menos una letra mayuscula',\n                      'La contrasena debe incluir al menos un numero'\n                    ];\n                    pm.expect(json.errors.password).to.be.an('array');\n                    pm.expect(json.errors.password).to.have.members(expected);\n                  });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"{{invalidPasswordEmail}}\",\n  \"password\": \"abc\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "register"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-01 · Login - Exito",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 200 en login', function () { pm.response.to.have.status(200); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje de login exitoso', function () { pm.expect(json.message).to.eql('Inicio de sesion exitoso'); });",
                                    "pm.test('Tokens presentes en login', function () { pm.expect(json.tokens.accessToken).to.be.a('string').and.not.empty; });",
                                    "pm.collectionVariables.set('accessToken', json.tokens.accessToken);",
                                    "pm.collectionVariables.set('refreshToken', json.tokens.refreshToken);",
                                    "pm.collectionVariables.set('accessTokenExpiresAt', json.tokens.accessTokenExpiresAt);",
                                    "pm.collectionVariables.set('refreshTokenExpiresAt', json.tokens.refreshTokenExpiresAt);"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"{{registeredEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "login"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-01 · Login - Recordarme",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 200 en login recordarme', function () { pm.response.to.have.status(200); });",
                                    "const json = pm.response.json();",
                                    "pm.collectionVariables.set('accessToken', json.tokens.accessToken);",
                                    "pm.collectionVariables.set('refreshToken', json.tokens.refreshToken);",
                                    "pm.collectionVariables.set('accessTokenExpiresAt', json.tokens.accessTokenExpiresAt);",
                                    "pm.collectionVariables.set('refreshTokenExpiresAt', json.tokens.refreshTokenExpiresAt);",
                                    "pm.test('Refresh token con vigencia extendida', function () {\n                    const expiry = new Date(json.tokens.refreshTokenExpiresAt);\n                    const now = new Date();\n                    const diffDays = (expiry.getTime() - now.getTime()) / (1000 * 60 * 60 * 24);\n                    const minDays = Number(pm.collectionVariables.get('rememberMeMinDays') || 20);\n                    pm.expect(diffDays).to.be.above(minDays);\n                  });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"{{registeredEmail}}\",\n  \"password\": \"{{testPassword}}\",\n  \"rememberMe\": true\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "login"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-01 · Login - Credenciales invalidas",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 401 por credenciales invalidas', function () { pm.response.to.have.status(401); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje de credenciales invalidas', function () { pm.expect(json.message).to.eql('Credenciales invalidas'); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"{{registeredEmail}}\",\n  \"password\": \"WrongPass1\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "login"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "M1-02 · Perfil basico",
            "description": "Escenarios de completar perfil con edad, grado e intereses (historia #4).",
            "item": [
                {
                    "name": "M1-02 · Perfil - Obtener sin datos",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 200 al obtener perfil vacio', function () { pm.response.to.have.status(200); });",
                                    "const json = pm.response.json();",
                                    "pm.test('El email coincide con el usuario autenticado', function () { pm.expect(json.email).to.eql(pm.collectionVariables.get('registeredEmail')); });",
                                    "pm.test('Edad y grado iniciales nulos', function () { pm.expect(json.age).to.be.null; pm.expect(json.grade).to.be.null; pm.expect(json.gradeLabel).to.be.null; });",
                                    "pm.test('Lista de intereses vacia', function () { pm.expect(json.interests).to.be.an('array').that.is.empty; });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-02 · Perfil - Actualizar datos basicos",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 200 al actualizar perfil', function () { pm.response.to.have.status(200); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Toast de confirmacion de perfil actualizado', function () { pm.expect(json.message).to.eql('Perfil actualizado'); });",
                                    "const profile = json.profile;",
                                    "pm.test('Perfil devuelto incluye datos normalizados', function () {\n    pm.expect(profile.email).to.eql(pm.collectionVariables.get('registeredEmail'));\n    pm.expect(profile.age).to.eql(18);\n    pm.expect(profile.grade).to.eql('SUPERIOR_TECNICA_2');\n    pm.expect(profile.gradeLabel).to.eql('2° ciclo de instituto tecnico');\n    pm.expect(profile.interests).to.eql(['Tecnologia', 'Arte']);\n});",
                                    "const interestAreaCatalog = {\n    'Tecnologia': 2,\n    'Tecnologia e Informatica': 2,\n    'Arte': 6,\n    'Arte y Creatividad': 6,\n    'Ciencias Exactas': 1,\n    'Ciencias de la Salud': 3,\n    'Ciencias Sociales': 4,\n    'Humanidades': 5,\n    'Negocios y Administracion': 7,\n    'Ingenieria': 8,\n    'Comunicacion': 9,\n    'Educacion': 10,\n    'Deportes y Recreacion': 11,\n    'Ciencias Ambientales': 12\n};",
                                    "const mappedAreaIds = profile.interests\n    .map(function (interest) { return interestAreaCatalog[interest]; })\n    .filter(function (id) { return id !== undefined; });",
                                    "pm.test('Intereses se mapean a areas de recomendacion conocidas', function () {\n    pm.expect(mappedAreaIds.length).to.eql(profile.interests.length);\n});",
                                    "pm.collectionVariables.set('profileInterests', JSON.stringify(profile.interests));",
                                    "pm.collectionVariables.set('profileInterestAreaIds', mappedAreaIds.join(','));"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"age\": 18,\n  \"grade\": \"superior_tecnica_2\",\n  \"interests\": [\n    \"  Tecnologia  \",\n    \"Arte\",\n    \"Tecnologia\",\n    \"Arte\",\n    \"TECNOLOGIA\"\n  ]\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-02 · Perfil - Obtener con datos",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 200 al consultar perfil actualizado', function () { pm.response.to.have.status(200); });",
                                    "const json = pm.response.json();",
                                    "const storedInterests = JSON.parse(pm.collectionVariables.get('profileInterests'));",
                                    "pm.test('Perfil persiste los cambios guardados', function () {\n    pm.expect(json.email).to.eql(pm.collectionVariables.get('registeredEmail'));\n    pm.expect(json.age).to.eql(18);\n    pm.expect(json.grade).to.eql('SUPERIOR_TECNICA_2');\n    pm.expect(json.gradeLabel).to.eql('2° ciclo de instituto tecnico');\n    pm.expect(json.interests).to.eql(storedInterests);\n});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-02 · Perfil - Recomendaciones alineadas a intereses",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 200 en recomendaciones por intereses', function () { pm.response.to.have.status(200); });",
                                    "const storedAreaIds = pm.collectionVariables.get('profileInterestAreaIds');",
                                    "pm.test('Areas derivadas del perfil disponibles', function () { pm.expect(storedAreaIds).to.be.a('string').and.not.empty; });",
                                    "const requestedAreaIds = pm.request.url.query.get('areaIds');",
                                    "pm.test('Consulta usa intereses actualizados', function () { pm.expect(requestedAreaIds).to.eql(storedAreaIds); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje de recomendaciones basado en intereses', function () { pm.expect(json.message).to.eql('Recursos sugeridos basados en tus intereses'); });",
                                    "pm.test('Recursos coinciden con las areas seleccionadas', function () {\n    pm.expect(json.resources).to.be.an('array');\n    if (json.resources.length > 0) {\n        const expected = storedAreaIds.split(',').map(function (id) { return parseInt(id, 10); });\n        json.resources.forEach(function (resource) {\n            if (resource.areaInteresId !== null && resource.areaInteresId !== undefined) {\n                pm.expect(expected).to.include(resource.areaInteresId);\n            }\n        });\n    }\n});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/learning-resources/by-interests?areaIds={{profileInterestAreaIds}}&page=0&size=5",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "learning-resources",
                                "by-interests"
                            ],
                            "query": [
                                {
                                    "key": "areaIds",
                                    "value": "{{profileInterestAreaIds}}"
                                },
                                {
                                    "key": "page",
                                    "value": "0"
                                },
                                {
                                    "key": "size",
                                    "value": "5"
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "M1-02 · Perfil - Edad fuera de rango",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 400 por edad invalida', function () { pm.response.to.have.status(400); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje general de validacion', function () { pm.expect(json.message).to.eql('Revise los datos enviados'); });",
                                    "pm.test('Mensaje especifico para age', function () { pm.expect(json.errors.age[0]).to.eql('La edad debe estar entre 13 y 30 anos'); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"age\": 12,\n  \"grade\": \"SECUNDARIA_3\",\n  \"interests\": [\"Tecnologia\"]\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-02 · Perfil - Grado invalido",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 400 por grado inexistente', function () { pm.response.to.have.status(400); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje general de validacion', function () { pm.expect(json.message).to.eql('Revise los datos enviados'); });",
                                    "pm.test('Mensaje especifico para grade', function () { pm.expect(json.errors.grade[0]).to.eql('El grado academico no es valido'); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"age\": 18,\n  \"grade\": \"UNIVERSIDAD_10\",\n  \"interests\": [\"Tecnologia\"]\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-02 · Perfil - Intereses obligatorios",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 400 por intereses vacios', function () { pm.response.to.have.status(400); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje general de validacion', function () { pm.expect(json.message).to.eql('Revise los datos enviados'); });",
                                    "pm.test('Mensaje especifico para interests', function () { pm.expect(json.errors.interests[0]).to.eql('Selecciona al menos un interes'); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"age\": 18,\n  \"grade\": \"SECUNDARIA_4\",\n  \"interests\": []\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "M1-03 · Datos personales y contrasena",
            "description": "Escenarios de actualizacion de datos personales y cambio seguro de contrasena (historia #4).",
            "item": [
                {
                    "name": "M1-03 · Datos personales - Actualizar nombre y preferencias",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 200 al actualizar datos personales', function () { pm.response.to.have.status(200); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje de confirmacion de datos personales', function () { pm.expect(json.message).to.eql('Datos personales actualizados'); });",
                                    "pm.test('Nombre normalizado en el perfil', function () { pm.expect(json.profile.name).to.eql('Maria QA'); });",
                                    "pm.test('Email permanece sin cambios', function () { pm.expect(json.profile.email).to.eql(pm.collectionVariables.get('registeredEmail')); });",
                                    "pm.test('Preferencias publicas actualizadas', function () {\n  pm.expect(json.profile.preferences).to.be.an('object');\n  pm.expect(json.profile.preferences.newsletter).to.be.true;\n  pm.expect(json.profile.preferences.shareProfile).to.be.false;\n});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PATCH",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"  Maria QA  \",\n  \"preferences\": {\n    \" newsletter \": true,\n    \"shareProfile\": false\n  }\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-03 · Datos personales - Consultar cambios",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 200 al obtener datos personales', function () { pm.response.to.have.status(200); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Nombre actualizado persistido', function () { pm.expect(json.name).to.eql('Maria QA'); });",
                                    "pm.test('Preferencias reflejan los valores guardados', function () {\n  pm.expect(json.preferences).to.be.an('object');\n  pm.expect(json.preferences.newsletter).to.be.true;\n  pm.expect(json.preferences.shareProfile).to.be.false;\n});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-03 · Cambio contrasena - Exito",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 200 al cambiar contrasena', function () { pm.response.to.have.status(200); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje pide reautenticacion', function () { pm.expect(json.message).to.eql('Contrasena actualizada. Inicia sesion nuevamente.'); });",
                                    "pm.test('Bandera de exito verdadera', function () { pm.expect(json.success).to.be.true; });",
                                    "pm.collectionVariables.set('testPassword', 'Password9');"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"currentPassword\": \"{{testPassword}}\",\n  \"newPassword\": \"Password9\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/change-password",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "change-password"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-03 · Login con nueva contrasena",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 200 al reautenticar', function () { pm.response.to.have.status(200); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje de login exitoso tras cambio', function () { pm.expect(json.message).to.eql('Inicio de sesion exitoso'); });",
                                    "pm.collectionVariables.set('accessToken', json.tokens.accessToken);",
                                    "pm.collectionVariables.set('refreshToken', json.tokens.refreshToken);",
                                    "pm.collectionVariables.set('accessTokenExpiresAt', json.tokens.accessTokenExpiresAt);",
                                    "pm.collectionVariables.set('refreshTokenExpiresAt', json.tokens.refreshTokenExpiresAt);"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"{{registeredEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "login"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-03 · Cambio contrasena - Politica de seguridad",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 400 por contrasena sin mayuscula', function () { pm.response.to.have.status(400); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje generico de validacion', function () { pm.expect(json.message).to.eql('Revise los datos enviados'); });",
                                    "pm.test('Detalle indica politica incumplida', function () {\n  pm.expect(json).to.have.property('errors');\n  pm.expect(json.errors).to.have.property('newPassword');\n  pm.expect(json.errors.newPassword).to.include('La contrasena debe incluir al menos una letra mayuscula');\n});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"currentPassword\": \"{{testPassword}}\",\n  \"newPassword\": \"password9\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/change-password",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "change-password"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-03 · Cambio contrasena - Igual a la actual",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 400 por contrasena repetida', function () { pm.response.to.have.status(400); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje exige contrasena diferente', function () { pm.expect(json.message).to.eql('La nueva contrasena debe ser diferente a la actual'); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"currentPassword\": \"{{testPassword}}\",\n  \"newPassword\": \"{{testPassword}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/change-password",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "change-password"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-03 · Cambio contrasena - Contrasena actual incorrecta",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 400 por contrasena actual incorrecta', function () { pm.response.to.have.status(400); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje de contrasena actual incorrecta', function () { pm.expect(json.message).to.eql('La contrasena actual no es correcta'); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"currentPassword\": \"WrongPass99\",\n  \"newPassword\": \"Password10\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/change-password",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "change-password"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-03 · Cambio contrasena - Intento fallido adicional 2",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 400 en intento adicional 2', function () { pm.response.to.have.status(400); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje de contrasena actual incorrecta se mantiene', function () { pm.expect(json.message).to.eql('La contrasena actual no es correcta'); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"currentPassword\": \"WrongPass99\",\n  \"newPassword\": \"Password10\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/change-password",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "change-password"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-03 · Cambio contrasena - Intento fallido adicional 3",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 400 en intento adicional 3', function () { pm.response.to.have.status(400); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje consistente de contrasena incorrecta', function () { pm.expect(json.message).to.eql('La contrasena actual no es correcta'); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"currentPassword\": \"WrongPass99\",\n  \"newPassword\": \"Password10\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/change-password",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "change-password"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-03 · Cambio contrasena - Intento fallido adicional 4",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 400 en intento adicional 4', function () { pm.response.to.have.status(400); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje consistente tras multiples fallos', function () { pm.expect(json.message).to.eql('La contrasena actual no es correcta'); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"currentPassword\": \"WrongPass99\",\n  \"newPassword\": \"Password10\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/change-password",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "change-password"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-03 · Cambio contrasena - Rate limit alcanzado",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 429 al superar intentos', function () { pm.response.to.have.status(429); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje indica espera antes de reintentar', function () { pm.expect(json.message).to.match(/Has superado el limite de intentos/); });",
                                    "pm.test('Incluye retryAfterSeconds positivo', function () { pm.expect(json.retryAfterSeconds).to.be.a('number').and.above(0); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"currentPassword\": \"{{testPassword}}\",\n  \"newPassword\": \"Password10\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/change-password",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "change-password"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "M1-04 · Eliminacion definitiva de cuenta",
            "description": "Escenarios de confirmacion y borrado de cuenta con revocacion de sesion (historia #5).",
            "item": [
                {
                    "name": "M1-04 · Eliminar cuenta - Confirmacion obligatoria",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 400 por confirmacion invalida', function () { pm.response.to.have.status(400); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje exige escribir ELIMINAR', function () { pm.expect(json.message).to.eql(\"Debes escribir 'ELIMINAR' para confirmar\"); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"confirmation\": \"cancelar\",\n  \"currentPassword\": \"{{testPassword}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-04 · Eliminar cuenta - Contrasena incorrecta",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 400 por contrasena incorrecta', function () { pm.response.to.have.status(400); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje de contrasena requerida correcta', function () { pm.expect(json.message).to.eql('La contrasena actual no es correcta'); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"confirmation\": \"ELIMINAR\",\n  \"currentPassword\": \"WrongPass99\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-04 · Eliminar cuenta - Exito",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 200 al eliminar cuenta', function () { pm.response.to.have.status(200); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje confirma eliminacion irreversible', function () { pm.expect(json.message).to.eql('Tu cuenta y datos se eliminaron de forma irreversible. Todas tus sesiones fueron cerradas.'); });",
                                    "pm.test('Se marca sin procesos pendientes', function () { pm.expect(json.pendingDeletion).to.be.false; });",
                                    "const token = pm.collectionVariables.get('accessToken');",
                                    "if (token) { pm.collectionVariables.set('deletedAccessToken', token); }",
                                    "pm.collectionVariables.set('accessToken', '');",
                                    "pm.collectionVariables.set('refreshToken', '');",
                                    "pm.collectionVariables.set('accessTokenExpiresAt', '');",
                                    "pm.collectionVariables.set('refreshTokenExpiresAt', '');"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{accessToken}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"confirmation\": \"ELIMINAR\",\n  \"currentPassword\": \"{{testPassword}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-04 · Eliminar cuenta - Sesion invalida tras borrado",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Sesion previa queda invalida', function () { pm.expect([401, 404]).to.include(pm.response.code); });",
                                    "const contentType = pm.response.headers.get('Content-Type') || '';",
                                    "if (contentType.includes('application/json')) {",
                                    "  try {",
                                    "    const json = pm.response.json();",
                                    "    pm.test('Mensaje informa que la cuenta ya no existe', function () { pm.expect(json.message).to.match(/no encontrado|no existe/i); });",
                                    "  } catch (error) {",
                                    "    pm.test('Respuesta vacia tras borrar cuenta', function () { pm.expect(pm.response.text()).to.be.a('string'); });",
                                    "  }",
                                    "} else {",
                                    "  pm.test('Respuesta no JSON tras borrar cuenta', function () { pm.expect(pm.response.text()).to.be.a('string'); });",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{deletedAccessToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "users",
                                "me"
                            ]
                        }
                    }
                },
                {
                    "name": "M1-04 · Eliminar cuenta - Login posterior invalido",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test('Status 401 al iniciar sesion con cuenta eliminada', function () { pm.response.to.have.status(401); });",
                                    "const json = pm.response.json();",
                                    "pm.test('Mensaje informa credenciales invalidas tras borrado', function () { pm.expect(json.message).to.eql('Credenciales invalidas'); });"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"{{registeredEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "auth",
                                "login"
                            ]
                        }
                    }
                }
            ]
        }
    ],
    "variable": [
        {
            "key": "testPassword",
            "value": "Password1",
            "type": "string"
        },
        {
            "key": "registeredEmail",
            "value": "",
            "type": "string"
        },
        {
            "key": "registeredUserId",
            "value": "",
            "type": "string"
        },
        {
            "key": "accessToken",
            "value": "",
            "type": "string"
        },
        {
            "key": "refreshToken",
            "value": "",
            "type": "string"
        },
        {
            "key": "accessTokenExpiresAt",
            "value": "",
            "type": "string"
        },
        {
            "key": "refreshTokenExpiresAt",
            "value": "",
            "type": "string"
        },
        {
            "key": "rememberMeMinDays",
            "value": "20",
            "type": "string"
        },
        {
            "key": "deletedAccessToken",
            "value": "",
            "type": "string"
        }
    ]
}
